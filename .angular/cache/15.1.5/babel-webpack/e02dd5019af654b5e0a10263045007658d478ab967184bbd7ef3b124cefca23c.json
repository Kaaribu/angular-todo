{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/material/snack-bar\";\nexport class AuthService {\n  constructor(_router, fireAuth, snackbar) {\n    this._router = _router;\n    this.fireAuth = fireAuth;\n    this.snackbar = snackbar;\n    this.authSub$ = new Subject();\n    this.isAuthenticated = false;\n    this._authSub$ = new BehaviorSubject(false);\n  }\n  registerUser(authData) {\n    this.fireAuth.createUserWithEmailAndPassword(authData.email, authData.password).then(res => {\n      this.authSuccess();\n    }).catch(err => {\n      this.snackbar.open(err.message, null, {\n        duration: 3000\n      });\n    });\n  }\n  login(authData) {\n    this.fireAuth.signInWithEmailAndPassword(authData.email, authData.password).then(res => {\n      this.authSuccess();\n    }).catch(err => {\n      this.snackbar.open(err.message, null, {\n        duration: 3000\n      });\n    });\n  }\n  logout() {\n    this._authSub$.next(false);\n    this._router.navigate(['/login']);\n    this.isAuthenticated = false;\n  }\n  isAuth() {\n    return this.isAuthenticated;\n  }\n  get isAuthenticated$() {\n    return this._authSub$.asObservable();\n  }\n  ngOnDestroy() {\n    this._authSub$.next(false);\n    this._authSub$.complete();\n  }\n  authSuccess() {\n    this.isAuthenticated = true;\n    this._authSub$.next(true);\n    this._router.navigate(['/']);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.MatSnackBar));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}