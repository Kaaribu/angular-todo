{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { TranslateCompiler } from '@ngx-translate/core';\nimport MessageFormat from '@messageformat/core';\nconst MESSAGE_FORMAT_CONFIG = new InjectionToken(\"MESSAGE_FORMAT_CONFIG\");\nconst defaultConfig = {\n  biDiSupport: false,\n  formatters: {},\n  strictNumberSign: false,\n  currency: \"USD\"\n};\n\n/**\n * This compiler expects ICU syntax and compiles the expressions with messageformat.js\n */\nlet TranslateMessageFormatCompiler = /*#__PURE__*/(() => {\n  class TranslateMessageFormatCompiler extends TranslateCompiler {\n    constructor(config) {\n      super();\n      this.mfCache = new Map();\n      const {\n        formatters: customFormatters,\n        biDiSupport,\n        strictNumberSign: strict,\n        currency\n      } = {\n        ...defaultConfig,\n        ...config\n      };\n      this.config = {\n        customFormatters,\n        biDiSupport,\n        strict,\n        currency\n      };\n    }\n    compile(value, lang) {\n      return this.getMessageFormatInstance(lang).compile(value);\n    }\n    compileTranslations(translations, lang) {\n      if (typeof translations === \"string\") {\n        return this.compile(translations, lang);\n      }\n      return Object.keys(translations).reduce((acc, key) => {\n        const value = translations[key];\n        return {\n          ...acc,\n          [key]: this.compileTranslations(value, lang)\n        };\n      }, {});\n    }\n    getMessageFormatInstance(locale) {\n      if (!this.mfCache.has(locale)) {\n        this.mfCache.set(locale, new MessageFormat(locale, this.config));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.mfCache.get(locale);\n    }\n  }\n  TranslateMessageFormatCompiler.ɵfac = function TranslateMessageFormatCompiler_Factory(t) {\n    return new (t || TranslateMessageFormatCompiler)(i0.ɵɵinject(MESSAGE_FORMAT_CONFIG, 8));\n  };\n  TranslateMessageFormatCompiler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslateMessageFormatCompiler,\n    factory: TranslateMessageFormatCompiler.ɵfac\n  });\n  return TranslateMessageFormatCompiler;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/* eslint-disable-next-line  no-console */\nconst log = (...message) => console.log(tag, ...message);\nconst tag = \"[TranslateMessageFormatCompiler]\";\nlet TranslateMessageFormatDebugCompiler = /*#__PURE__*/(() => {\n  class TranslateMessageFormatDebugCompiler extends TranslateMessageFormatCompiler {\n    compile(value, lang) {\n      log(`COMPILE (${lang})`, value);\n      const interpolationFn = super.compile(value, lang);\n      return this.wrap(interpolationFn, value);\n    }\n    compileTranslations(value, lang) {\n      log(`COMPILE (${lang})`, value);\n      return super.compileTranslations(value, lang);\n    }\n    wrap(fn, reference) {\n      return params => {\n        log(\"INTERPOLATE\", reference, params);\n        return fn(params);\n      };\n    }\n  }\n  TranslateMessageFormatDebugCompiler.ɵfac = /* @__PURE__ */function () {\n    let ɵTranslateMessageFormatDebugCompiler_BaseFactory;\n    return function TranslateMessageFormatDebugCompiler_Factory(t) {\n      return (ɵTranslateMessageFormatDebugCompiler_BaseFactory || (ɵTranslateMessageFormatDebugCompiler_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateMessageFormatDebugCompiler)))(t || TranslateMessageFormatDebugCompiler);\n    };\n  }();\n  TranslateMessageFormatDebugCompiler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslateMessageFormatDebugCompiler,\n    factory: TranslateMessageFormatDebugCompiler.ɵfac\n  });\n  return TranslateMessageFormatDebugCompiler;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ngx-translate-messageformat-compiler\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MESSAGE_FORMAT_CONFIG, TranslateMessageFormatCompiler, TranslateMessageFormatDebugCompiler, defaultConfig };\n//# sourceMappingURL=ngx-translate-messageformat-compiler.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}